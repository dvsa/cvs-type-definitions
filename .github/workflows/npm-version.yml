name: npm version PRs
on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]
jobs:
  get-prs:
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.get-refs.outputs.result }}
    steps:
      - uses: actions/github-script@v6
        id: get-refs
        with:
          script: |
            const pullRequests = (await github.rest.pulls.list({
                ...context.repo
            })).data

            const res = pullRequests.map(pr => ({refs: pr.head.ref, title: pr.title}))
            return res

  run-version:
    needs: [get-prs]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.get-prs.outputs.matrix-json) }}
    name: "Version branch ${{ matrix.refs }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop

      - name: Get develop version
        id: develop-version
        run: |
          echo "::set-output name=DEVELOP_VERSION::$(
            jq -r .version package.json
          )"

      - uses: actions/checkout@v3
        with:
          ref: ${{ matrix.refs }}

      - name: Get version bump
        id: version-bump
        env:
          TITLE: ${{ matrix.title }}
        run: |
          prTitleSplit="$(echo $TITLE | cut -d '(' -f 1 )"
          pattern="^(patch|minor|major)$"
          if ! [[ $prTitleSplit =~ $pattern ]]; then
            echo "PR title does not match pattern"
            exit 1
          fi
          echo "::set-output name=VERSION_BUMP::$(
            echo "$prTitleSplit"
          )"

      - name: Get new version
        uses: actions/github-script@v6
        id: get-new-version
        with:
          script: |
            const semVarVersions = ["major", "minor", "patch"]
            const bumpVersion = (previousVersion, bump) => {
            const prev = previousVersion.substring(1);
            const indexToChange = semVarVersions.indexOf(bump)
            return prev.split(".")
              .map((n, i) => i === indexToChange ? +n + 1 : i > indexToChange ? 0 : +n).join(".")
            };
            return bumpVersion("${{ steps.develop-version.outputs.DEVELOP_VERSION }}", "${{ steps.version-bump.outputs.VERSION_BUMP }}")

      - name: Bump version
        run: |
          if [[ ${{ steps.get-new-version.outputs.result }} == $(jq -r .version package.json) ]]; then
            echo "Already the right version"
            exit 0
          fi
          # Set to develop version - workaround for jq editing in place
          jq --arg V "${{ steps.develop-version.outputs.DEVELOP_VERSION }}" '.version = $V' package.json > tmp.json && rm package.json && mv tmp.json package.json
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -am "Bump to version ${{ steps.develop-version.outputs.DEVELOP_VERSION }}"
          npm version --no-git-tag-version "${{ steps.version-bump.outputs.VERSION_BUMP }}"
          git commit -am "Bump to version $(jq -r .version package.json)"
          git push
